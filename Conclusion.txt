La implementacion de las funciones previamente citadas puede no haber sido realizada en su totalidad teniendo en cuenta “todas” las “reglas y normas” previamente instruidas en nosotros, ya que (en este caso particular, Free Pascal, siendo un lenguaje perteneciente al paradigma imperativo estructurado) en mas de una ocasión las necesidades funcionales requerian un quiebre respecto a la utopia de un programa escrito acorde a un “Paradigma de Programacion Puro”. A esto debemos sumarle las limitaciones y prestaciones propias del lenguaje y del sistema, las cuales, para nosotros como desarrolladores, se traducian en la cantidad, flexibilidad y potencia de las llamadas al sistema disponibles en FPC (Un ejemplo de esto, es el sacrificio de la UNIT CRT, la cual brinda control avanzado de Sonido, Pantalla y Teclado; a cambio de “Cierta peRdida de conTrol”).
Luego del estudio de la catedra, los distintos trabajos prácticos y la realización de este proyecto, tenemos un mayor panorama del funcionamiento de los sistemas operativos con los que “convivimos” todos los días, y de la difícil tarea que implica su construcción y correcto funcionamiento. Lo anterior es, debido en gran parte a la orientacion de los trabajos practicos y las condiciones impuestas sobre el trabajo practico final, especialmente cierto para sistemas Unix, y siendo aun mas especificos aquellos cuyas distros se hallan basadas en Debian (Debian, Ubuntu, Lubuntu, Linux Mint, etc).
Fue satisfactoriamente interesante pasar del enfoque teorico (el cual en algunos momentos se tornaba tedioso debido a la dificultad para el alumno promedio de “conectar” la teoria dictada por los profesores con la verdadera implementacion y funcionamiento de un S.O.) a un enfoque mas practico que nos permitio realmente aplicar gran parte de lo aprendido durante la asignatura.
Probablemente antes teníamos una  mera noción del esfuerzo que conlleva implementar (Y hacerlo bien, aun mas importante) un Sistema Operativo; la cual ahora podemos asegurar ha ganado profundidad.
